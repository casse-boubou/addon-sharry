#!/usr/bin/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Add-on: Sharry
# Runs Sharry
# ==============================================================================

readonly SHARRY=sharry.restserver
declare host
declare port
declare username
declare password
declare property
declare value
declare base_url
declare log_level
declare db_type=mariadb
declare database=sharry
declare -a conf_props=()

# --- Load USER'S CUSTOM configuration overrides ---
bashio::log.debug "Loading 'conf_overrides'..."
for var in $(bashio::config 'conf_overrides|keys'); do
    property=$(bashio::config "conf_overrides[${var}].property")
    value=$(bashio::config "conf_overrides[${var}].value")
    if [[ ${property} =~ secret|password ]]; then
        bashio::log.info "Setting ${property} to ******"
    else
        bashio::log.info "Setting ${property} to ${value}"
    fi
    conf_props+=("-D${property}=${value//\"/\\\"}")
done




# --- SET MARIA DB URL ---
bashio::log.debug "Setting DB URL..."
if ! bashio::config.is_empty 'remote_db_host'; then
    db_type=$(bashio::config 'remote_db_type')
    host=$(bashio::config 'remote_db_host')
    port=$(bashio::config 'remote_db_port')
    username=$(bashio::config 'remote_db_username')
    password=$(bashio::config 'remote_db_password')
    database=$(bashio::config 'remote_db_database')
else
    host=$(bashio::services 'mysql' 'host')
    port=$(bashio::services 'mysql' 'port')
    username=$(bashio::services 'mysql' 'username')
    password=$(bashio::services 'mysql' 'password')
fi
conf_props+=( \
    "-D${SHARRY}.backend.jdbc.url=jdbc:${db_type}://${host}:${port}/${database}" \
    "-D${SHARRY}.backend.jdbc.user=${username}" \
    "-D${SHARRY}.backend.jdbc.password=${password}" \
)




# --- SET UP DATABASE ---
# Default database
if bashio::config.exists 'DefaultStore'; then
    conf_props+=("-D${SHARRY}.backend.files.default-store=$(bashio::config 'DefaultStore')")
fi
# Maria_DB
if bashio::config.true 'use_maria_db'; then
    bashio::log.info "Configuring Maria db..."
    conf_props+=("-D${SHARRY}.backend.files.stores.database.enabled=$(bashio::config 'use_maria_db')")
fi
# Local_DB
if bashio::config.true 'use_local_db'; then
    bashio::log.info "Configuring Local db..."
    conf_props+=("-D${SHARRY}.backend.files.stores.filesystem.enabled=$(bashio::config 'use_local_db')")
    conf_props+=("-D${SHARRY}.backend.files.stores.filesystem.directory=/share/$(bashio::config 'local_db')")
    bashio::log.info "Local db locate at /share/$(bashio::config 'local_db')"
fi




# --- SET UP COPY-FILE ---
if bashio::config.true 'copy_db'; then
    bashio::log.info "Activate copy-file..."
    conf_props+=("-D${SHARRY}.backend.files.copy-files.enable=$(bashio::config 'copy_db')")
    conf_props+=("-D${SHARRY}.backend.files.copy-files.source=$(bashio::config 'copy_db_source')")
    conf_props+=("-D${SHARRY}.backend.files.copy-files.target=$(bashio::config 'copy_db_target')")
    bashio::log.info "Copy-file is activated FROM $(bashio::config 'copy_db_source') TO $(bashio::config 'copy_db_target')"
fi




# --- SET UP BASE URL ---
bashio::log.debug "Setting base URL for Sharry..."
if bashio::config.true 'use_ssl'; then
    base_url='https://'
else
    base_url='http://'
fi
base_url+="$(bashio::config 'domain')"
if bashio::var.has_value "$(bashio::addon.port 9090)"; then
    base_url+=":$(bashio::addon.port 9090)"
fi
bashio::log.info "Sharry will be available at ${base_url}"
conf_props+=("-D${SHARRY}.base-url=${base_url}")




# --- Add other config options to properties array ---
bashio::log.debug "Adding in secret, language, theme and share config options..."
conf_props+=("-D${SHARRY}.backend.auth.server-secret=$(bashio::config 'server_secret')")

if bashio::config.exists 'theme'; then
    conf_props+=("-D${SHARRY}.webapp.initial-theme=$(bashio::config 'theme')")
fi

if ! bashio::config.is_empty 'default_language'; then
    conf_props+=("-D${SHARRY}.webapp.default-language=$(bashio::config 'default_language')")
fi

if bashio::config.exists 'share_max_size_gb'; then
    conf_props+=("-D${SHARRY}.backend.share.max-size=$(bashio::config 'share_max_size_gb')g")
fi

if bashio::config.exists 'share_max_valid_days'; then
    conf_props+=("-D${SHARRY}.backend.share.max-validity=$(bashio::config 'share_max_valid_days')d")
fi




# --- SET LOG LEVEL ---
# Can't be set with arguments or env variables, search & replace config file
case "$(bashio::config 'log_level')" in \
    trace)      log_level='Trace' ;; \
    debug)      log_level='Debug' ;; \
    notice)     ;& \
    warning)    log_level='Warn' ;; \
    error)      ;& \
    fatal)      log_level='Error' ;; \
    *)          log_level='Info' ;; \
esac;
bashio::log.info "Sharry log level set to ${log_level}"
conf_props+=("-D${SHARRY}.logging.minimum-level=${log_level}")

# Print all config options for debugging
bashio::log.debug
bashio::log.debug "Printing all startup flags being provided to Sharry..."
for prop in "${conf_props[@]}"; do
    bashio::log.debug "${prop}"
done
bashio::log.debug




bashio::log.info "Handing over control to Sharry..."
exec /opt/sharry/bin/sharry-restserver "${conf_props[@]}" -- /etc/sharry/sharry.conf
 